#!/usr/bin/env python
#coding:utf-8

import sys,os,time,shutil
import urllib 
import urllib2
import zipfile
import getpass
import ctypes
from PIL import Image,ImageFile
from biplist import *
from jdjrClassSize import analyse
import pyperclip


#  格式：\033[显示方式;前景色;背景色m
#  2  
#  3 说明：
#  4 前景色            背景色           颜色
#  5 ---------------------------------------
#  6 30                40              黑色
#  7 31                41              红色
#  8 32                42              绿色
#  9 33                43              黃色
# 10 34                44              蓝色
# 11 35                45              紫红色
# 12 36                46              青蓝色
# 13 37                47              白色
# 14 显示方式           意义
# 15 -------------------------
# 16 0                终端默认设置
# 17 1                高亮显示
# 18 4                使用下划线
# 19 5                闪烁
# 20 7                反白显示
# 21 8                不可见
# 22  
# 23 例子：
# 24 \033[1;31;40m    <!--1-高亮显示 31-前景色红色  40-背景色黑色-->
# 25 \033[0m          <!--采用终端默认设置，即取消颜色设置-->
# 复制代码
# 举例：

# 复制代码
# 1 print('\033[1;31;40m')
# 2 print('*' * 50)
# 3 print('*HOST:\t', 2002)
# 4 print('*URI:\t', 'http://127.0.0.1')
# 5 print('*ARGS:\t', 111)
# 6 print('*TIME:\t', '22:28')
# 7 print('*' * 50)
# 8 print('\033[0m')

def getCurrentBranch(currentBranch):#格式化分支名称

   returnstring = ''
   for i in range(0,32):
       returnstring = currentBranch.replace(chr(i),'')

   returnstring = returnstring.replace('[32m','')
   returnstring = returnstring.replace('[m','')
   returnstring = returnstring.replace(' ','')
   returnstring = returnstring.replace('\x1b','')
   returnstring = returnstring.replace(chr(10),'')

   return returnstring

def getLocalCurrentBranch():#获取当前分支名称
   branchs = os.popen('/usr/bin/git branch').readlines()
   currentBranch = ''
   for item in branchs:
      if '*' in item:
          currentBranch = getCurrentBranch(item)

   currentBranch = currentBranch.replace('*','')
   return currentBranch

def calculate_hash(imagePath):
      
      ImageFile.LOAD_TRUNCATED_IMAGES = True
      image = ''
      if not isinstance(imagePath, Image.Image):
         image = Image.open(imagePath)
      
      x,y = image.size

      resize_width = 9
      resize_height = 8
      # 1. resize to (9,8)

      smaller_image = image.resize((resize_width, resize_height))   
      grayscale_image = smaller_image.convert("L")

      # 3. 比较相邻像素
      pixels = list(grayscale_image.getdata())
      difference = []
      for row in range(resize_height):    
          row_start_index = row * resize_width    
          for col in range(resize_width - 1):        
              left_pixel_index = row_start_index + col
              difference.append(pixels[left_pixel_index] > pixels[left_pixel_index + 1])

      # 转化为16进制(每个差值为一个bit,每8bit转为一个16进制)
      decimal_value = 0
      hash_string = ""
      for index, value in enumerate(difference):    
          if value:  # value为0, 不用计算, 程序优化        
              decimal_value += value * (2 ** (index % 8))   
          if index % 8 == 7:  # 每8位的结束        
              hash_string += str(hex(decimal_value)[2:].rjust(2, "0"))  # 不足2位以0填充。0xf=>0x0f        
              decimal_value = 0

      return  int(hash_string, 16),x,y

def getthesameimage(imagePath):

    count = 0

    num,oriw,orih = calculate_hash(imagePath)

    time1 = time.time()

    targetPath = os.environ['HOME'] + '/' + '.Trash/' + '%d' % time1
    os.mkdir(targetPath)
    pathDir =  os.popen('find . -name "*@2x.png"').readlines()
    base = os.getcwd()
    
    sameimage = []
    for item in pathDir:
        if '.bundle' in item:
            continue
        item = base + item[1:]
        
        # tar = filePath + '/' + item
        # tarFile = tar + '/' + item.replace('.imageset','@2x.png')
        item = item.replace(chr(10),'')
        lastName = item.split('/')[-1]
        tarFile = item
        endFile = targetPath + '/' + lastName
        
        if os.path.exists(tarFile):
           count = count + 1
           writepercentforimage(count)
           ha,w,h = calculate_hash(tarFile)
           if abs(ha - num) < 5:
              if w > oriw - 20 and w < oriw + 20 and h > orih - 20 and h < orih  + 20:
                 sameimage.append(tarFile)
                 shutil.copy(tarFile,endFile)
        else:
            print 'False'      
    
    writepercentforimage(1800)

    print ' '
    print '\033[1;31m' + '>>>>>>>>>>>>>>>图片路径>>>>>>>>>>>>' + '\033[0m'
    for item in sameimage:
        print '    ' + item
    print '\033[1;31m' + '>>>>>>>>>>>>>>>图片路径>>>>>>>>>>>>' + '\033[0m'

    time2 = time.time()
    shutil.copy(imagePath,targetPath + '/' + 'origin.png')
    os.system('open ' + targetPath)
    
    return time2 - time1,count


pathDict = {}
images = []

def check_contain_chinese(check_str):
    for ch in check_str.decode('utf-8'):
       if u'\u4e00' <= ch <= u'\u9fff':
         return True
    return False

def writepercent(count):
    bar_length=100
    percent = count / 130
    hashes = '#' * int(percent/100.0 * bar_length)
    spaces = ' ' * (bar_length - len(hashes))
    sys.stdout.write("\rPercent: [%s] %d%%"%(hashes + spaces, percent) + "\r")
    sys.stdout.flush()

def writepercentforimage(count):
    bar_length=100
    if count < 50:
       return
    percent = count / 18
    hashes = '#' * int(percent/100.0 * bar_length)
    spaces = ' ' * (bar_length - len(hashes))
    sys.stdout.write("\rPercent: [%s] %d%%"%(hashes + spaces, percent) + "\r")
    sys.stdout.flush()

def writepercentforclass(count):
    bar_length=100
    if count < 50:
       return
    percent = count / 1000
    hashes = '#' * int(percent/100.0 * bar_length)
    spaces = ' ' * (bar_length - len(hashes))
    sys.stdout.write("\rPercent: [%s] %d%%"%(hashes + spaces, percent) + "\r")
    sys.stdout.flush()

def getFiles():
    time1 = time.time()

    command = 'find . -name "*.m"'
    fileString = os.popen(command).read()
    files = fileString.split('\n')
    count = 0

    filesnew = []
    fileInfoDic = {}

    for item in files:
        if os.path.exists(item):
              item = item.replace(' ','\ ')
              string = os.popen('grep -o "@.*" ' + item).read()
              strings = string.split('\n')
              for single in strings:
#过滤的字段 --,•,Key,Page,errFlag,:,Url,msg,success,Color,data
                  if '@[@"' in single:
                      single = single[2:]

                  if len(single) > 2 and single[1] == '"' and single[2] != '#':
                     if single.count('"') <= 2:
                        index = single.find('"', single.index('"') + 1)
                        single = single[2:index]
                        single = single.replace('%@','')
                        single = single.replace('%ld','')
                        single = single.replace('%d','')
                        single = single.replace('%','')
                        single = single.replace('￥','')
                        single = single.replace('.png','')

                        if len(single) > 2 and check_contain_chinese(single) == False and (':' in single) == False and ('.' in single) == False and ('•' in single) == False and ('--' in single) == False and ('errFlag' in single) == False and ('●' in single) == False and ('Color' in single) == False and ('*' in single) == False and ('type' in single) == False and ('etitle' in single) == False:
                            
                            if single not in filesnew:
                               last = single[-1]
                               nums = ['-1','0','1','2','3','4','5','6','7','8','9','_']
                               if last in nums:
                                  single = single[:-1]

                               count = count + 1
                               filesnew.append(single)
                               writepercent(count)

                               info = {}
                               info['count'] = 1
                               fileInfoDic[single] = info

                            else:

                               info = fileInfoDic[single]
                               countN = info['count']
                               countN = countN + 1
                               info['count'] = countN
                               fileInfoDic[single] = info

                     else:
                        images = []
                        if check_contain_chinese(single):
                           images = single.split(' ')
                        else:
                           images = single.split(',')

                        if len(images) == 1:
                           images = single.split(' ')

                        if len(images) == 1:
                           images = single.split(':')   

                        for img in images:
                            if '@' in img:
                               indeximg = img.index('@')
                               img = img[indeximg:]
                            img = img.replace('@','')
                            img = img.replace('"','')
                            img = img.replace(']','')
                            img = img.replace(';','')
                            img = img.replace('.png','')
                            if ':' in img:
                                img = img[img.index(':')+1:]
                            if img not in filesnew:
                               
                               count = count + 1
                               nums = ['-1','0','1','2','3','4','5','6','7','8','9']
                               if len(img) > 2:
                                  if img[-2] == '_' and img[-1] in nums:
                                     img = img[:-2]
                                  if img[-3] == '_' and img[-2:] in nums:
                                     img = img[:-3]
                                  if img[-1] in nums:
                                     img = img[:-1]    

                               filesnew.append(img)
                               writepercent(count)

                               info = {}
                               info['count'] = 1
                               fileInfoDic[img] = info

                            else:

                               info = fileInfoDic.get(img)
                               countN = info['count']
                               countN = countN + 1
                               writepercent(count)
                               info['count'] = countN
                               fileInfoDic[img] = info 
 
    return filesnew,fileInfoDic

def getImages():
    global pathDict
    global images

    fileString = os.popen('find . -name "*.imageset"').read()
    pathDir = fileString.split('\n')
    images = []
    count = 0
    for path in pathDir:
        if '.bundle' in path or ' ' in path or '.framework' in path or check_contain_chinese(path) or 'Vendors' in path or 'live_face' in path or 'ai_robot' in path or 'adScroll' in path:
           continue 
        lastPath = path.split('/')[-1]
        lastPath = lastPath.replace('.imageset','')
        nums = ['-1','0','1','2','3','4','5','6','7','8','9']
        if len(lastPath) > 2:
           if lastPath[-2] == '_' and lastPath[-1] in nums:
              lastPath = lastPath[:-2]
           if lastPath[-3] == '_' and lastPath[-2:] in nums:
              lastPath = lastPath[:-3]
           if lastPath[-1] in nums:
              lastPath = lastPath[:-1]
           if lastPath[-1] in nums:
              lastPath = lastPath[:-1]   

        if lastPath not in images:
           pathDict[lastPath] = path               
           images.append(lastPath)
        
        count = count + 1

    return images

def getImageSize(imagePath):
   
   lastPath = imagePath.split('/')[-1]
   lastPath = lastPath.replace('.imageset','@2x.png')
   imagePathNew = imagePath + '/' + lastPath
   if os.path.exists(imagePathNew):
      return os.stat(imagePathNew).st_size
   else:
      pathList = os.listdir(imagePath)
      for path in pathList:
          if '@2x.png' in path:
             lastPath = imagePath + '/' + path
             if os.path.exists(lastPath):
                return os.stat(imagePath).st_size

          if '.png' in path:
             lastPath = imagePath + '/' + path
             if os.path.exists(lastPath):
                return os.stat(imagePath).st_size

      return 0             

def getimagesUseInfo():
   time3 = time.time()
   files,fileDicCount = getFiles()
   images = getImages()

   sortList = []

   for image in images:
       imagePath = pathDict[image]
       storageSize = getImageSize(imagePath)
       if storageSize > 1024:
          storageSizeK = '%dK' % (storageSize / 1024)
       else:
          storageSizeK = '%db' % storageSize
       
       count = fileDicCount.get(image)
       item = []
       item.append(storageSize)
       item.append(storageSizeK)
       item.append(count)
       item.append(image)
       item.append(imagePath)
       sortList.append(item)

   sortListNew = sorted(sortList, key=lambda sortItem: sortItem[0],reverse=True)   # sort by age

   for item in sortListNew:
      print item
   
   time4 = time.time()
   print('\033[1;31m' + '耗时:%ds' % (time4 - time3) + '\033[0m')
   print('\033[1;32m' + '共处理图片:%d张' % len(sortListNew) + '\033[0m')
   return sortListNew

def getunuseimage():
   time3 = time.time()
   files,fileDic = getFiles()
   images = getImages()

   writepercent(13000)
   print '\n'

   unuseimage = []

   for image in images:
       if image in files:
          pass
       else:
          unuseimage.append(image)

   print('\033[1;31m' + '无用的图片资源>>>>>>>>>>>>>>>>>>>>>>' + '\033[0m')
   countn = 0
   for path in unuseimage:
       countn = countn + 1
       print '    ' + pathDict[path]
 
   time4 = time.time()
   print('\033[1;31m' + '无用的图片资源>>>>>>>>>>>>>>>>>>>>>>' + '\033[0m')
   print(' ')
   print('\033[1;34m' + '图片总数:%d' % len(images) + '\033[0m')
   print('\033[1;33m' + '无用图片总数:%d' % countn + '\033[0m')
   print(' ')
   print('\033[1;32m' + '总耗时:%lds' % (time4 - time3) + '\033[0m')

def getTheSameImageFolder():
   hashDic = {}
   count = 0
   time1 = time.time()

   pathDir =  os.popen('find . -name "*@2x.png"').readlines()
   base = os.getcwd()
    
   sortList = []
   for item in pathDir:
       if '.bundle' in item:
          continue
       item = base + item[1:]
       item = item.replace(chr(10),'')
       lastName = item.split('/')[-1]
       tarFile = item
        
       if os.path.exists(tarFile):
          count = count + 1
          ha,w,h = calculate_hash(tarFile)
          baseItem = []
          baseItem.append(ha)
          baseItem.append(lastName)
          baseItem.append(tarFile)
          sortList.append(baseItem) 
       else:
          print 'False'

   sortListNew = sorted(sortList, key=lambda sortItem: sortItem[0],reverse=True)
     
   resultList = [[]] 
   for num in range(0,len(sortListNew) - 1):
       if num == 0:
          current = sortListNew[0]
          lastList = resultList[-1]
          lastList.append(current)

       current = sortListNew[num][0]
       next = sortListNew[num + 1][0]
       if abs(current - next) < 5:
          lastList = resultList[-1]
          lastList.append(sortListNew[num + 1])
       else:
          item = []
          item.append(sortListNew[num + 1])
          resultList.append(item)             
   
   copyCount = 0
   targetPath = os.environ['HOME'] + '/' + '.Trash/' + '%d' % time1
   os.mkdir(targetPath)
   for item in resultList:
       if len(item) > 1:
          copyCount = copyCount + 1
          name = '%d--%d' % (len(item), copyCount)
          targetName = targetPath + '/' + name
          os.mkdir(targetName)
          for itemN in item:
              tarFile = itemN[2]
              
              tarFile = tarFile.replace(chr(10),'')
              lastName = tarFile.split('/')[-1]
              endFile = targetName + '/' + lastName

              if os.path.exists(tarFile):
                 shutil.copy(tarFile,endFile)

   print copyCount
   os.system('open ' + targetPath)           


filePathClassList = []
filePathClassDict = {}
fileNameAuthorDict = {}
fileNameClassList = []


def getClassFilePath():#获取类的文件列表
   global filePathClassList
   global filePathClassDict
   global fileNameAuthorDict

   filePathString = os.popen('find . -name "*.m"').read()
   filePaths = filePathString.split('\n')
   for filePath in filePaths:
       filePath = filePath.replace(' ','\ ')
       if 'Pods' in filePath or 'node_modules' in filePath or 'JRTemPlateTools' in filePath or 'ReactNative' in filePath or 'JRLibrary' in filePath or 'Model' in filePath or 'model' in filePath:
           continue
       if os.path.exists(filePath):    
          filePathClassList.append(filePath)
          filename = filePath.split('/')[-1].replace('.m','')

          authorName = os.popen('grep -o ".*Created.*" ' + filePath).read()
          leftindex = authorName.find('by')
          rightindex = authorName.find(' on ')
          authorName = authorName[leftindex+2:rightindex]
          authorName = authorName.replace(' ','')

          if len(filename) > 0 and '(' not in filename and 'Base' not in filename and 'base' not in filename:
             # filePathClassDict[filename] = 0
             # fileNameClassList.append(filename)
             if len(authorName) > 0:
                fileNameAuthorDict[filename] = authorName

          classNameOthers = os.popen('grep -o "@implementation.*" ' + filePath).read().split('\n')
          for classNameOther in classNameOthers:
              if '//' in classNameOther:
                 continue
              classNameOther = classNameOther.replace('@implementation','')
              classNameOther = classNameOther.replace('{','')
              classNameOther = classNameOther.replace(' ','')
              # if classNameOther == filename:
              #    continue
              if len(classNameOther) > 0 and '(' not in classNameOther and 'Base' not in classNameOther and 'base' not in classNameOther and 'Model' not in classNameOther and 'model' not in classNameOther:  
                 filePathClassDict[classNameOther] = 0
                 fileNameClassList.append(classNameOther)
                 if len(authorName) > 0:
                    fileNameAuthorDict[classNameOther] = authorName


def handleItemCode(codestring):
    discardindex = codestring.find('//')
    returnstring = codestring[:discardindex]
    returnstring = returnstring.lstrip()
    returnstring = returnstring.replace(':',' ')
    returnstring = returnstring.replace('[',' ')
    returnstring = returnstring.replace(']',' ')
    returnstring = returnstring.replace('(',' ')
    returnstring = returnstring.replace(')',' ')
    returnstring = returnstring.replace('=',' ')
    returnstring = returnstring.replace('*',' ')

    returnClassNameList = []
    
    classNameList = returnstring.split(' ')
    for className in classNameList:
        if len(className) > 4 and className[0].isupper() and className[:2] != 'UI' and className[:2] != 'NS' and className[:2] != 'CG' and className[:3] != 'MAS':
           returnClassNameList.append(className)

    return returnClassNameList

def getunuseclass():
    writepercentforclass(1000)
    time1 = time.time()
    getClassFilePath()  

    global filePathClassList
    global filePathClassDict
    global fileNameClassList
    global fileNameAuthorDict

    count = 0
    for filePath in filePathClassList:
       codeString = os.popen('grep -o ".*\[.*" ' + filePath).read()
       codeItems = codeString.split('\n')
       for codeItem in codeItems:
           classNameList = handleItemCode(codeItem)
           count = count + 1
           writepercentforclass(count)
           if len(classNameList) > 0:
              for className in classNameList:
                  countItem = filePathClassDict.get(className)
                  if type(countItem) == type(1):
                     countItem = countItem + 1
                     filePathClassDict[className] = countItem
    
    writepercentforclass(100000)
    print ' '
    unuseCount = 0
    unuseItemList = []
    print '----------------------------'
    for item in fileNameClassList:
        if '+' in item:
           continue
        countItem = filePathClassDict.get(item)
        if type(countItem) == type(1) and countItem == 0 and len(item) > 4 and item[:2] != 'UI':
           unuseCount = unuseCount + 1
           authorName = fileNameAuthorDict.get(item)
           printString = ''
           if type(authorName) != type(''):
              authorName = ''
           
           itemList = []
           itemList.append(item)
           itemList.append(authorName)

           unuseItemList.append(itemList)

    sortListNew = sorted(unuseItemList, key=lambda itemList: itemList[1])       
    
    for item in sortListNew:
       print('\033[1;32m' + '    ' + item[0] + '  ------    ' + item[1] + '\033[0m')

    print '----------------------------'
    print '\033[1;31m' + ('共耗时%ds' % (time.time() - time1)) + '\033[0m'
    print '\033[1;33m' + ('共分析元素个数:%d' % count) + '\033[0m'
    print '\033[1;34m' + ('未被使用%d' % unuseCount) + '\033[0m'


def findUnuseMethod():
    time1 = time.time()

    if os.path.exists('JDFinance.xcworkspace') == False:
       print '请切换至京东金融代码库下'
       sys.exit(1)

    filesString = os.popen('find . -name *.m').read()
    files = filesString.split('\n')

    filecount = 0
    fileuseList = []

    for item in files:
        if 'Pods' not in item and 'node_modules' not in item and 'JRLibrary' not in item and 'ReactNative' not in item:
            filename = item.split('/')[-1]
            filecount = filecount + 1
            filename = filename.replace('.m','')
            index = filename.find('+')
            if index != -1:
               filenameF = filename.split('+')[0]
               filenameR = filename.split('+')[1]
               filename = filenameF + '(' + filenameR + ')'
            fileuseList.append(filename)  

    filepathString = os.popen('find ~/Library/Developer/Xcode/DerivedData -name JDMobile.app').read()

    filepaths = filepathString.split('\n')

    lastTime = 0
    lastTimeString = ''
    lastPath = ''

    if len(filepaths) == 0:
       sys.exit(1)

    for filepath in filepaths:
        timestring = os.popen('GetFileInfo ' + filepath + ' | grep modified').read()
        if 'modified:' in timestring:
            timestring = timestring.replace('modified: ','')
            timestring = timestring.replace(chr(10),'')

            localtime = time.mktime(time.strptime(timestring, '%m/%d/%Y %H:%M:%S'))
            if localtime > lastTime:
               lastTime = localtime
               lastPath = filepath
               lastTimeString = timestring


    Dict = readPlist(lastPath+'/Info.plist') 

    appversion = Dict['CFBundleShortVersionString']
    buildversion = Dict['CFBundleVersion']
    
    lastPath = lastPath + '/JDMobile'       
   
    text = os.popen('otool -v -s __DATA  __objc_selrefs ' + lastPath).read()

    funcUseList = []

    funcUseStringList = text.split('\n')

    count = 0

    for func in funcUseStringList:
        funcIndex = func.find('methname:')
        func = func[funcIndex+9:]
        if func not in funcUseList:
           funcUseList.append(func)
        else: 
           count = count + 1
           # print func

    text = os.popen('nm ' + lastPath).read()

    funcList = []

    funcStringList = text.split('\n')

    endcount = 0 

    funcVarDic = {}

    for func in funcStringList:
        
        if '0000000' not in func:
            continue
        index = func.find('_OBJC_IVAR_$_')
        if index == -1:
           continue
        func = func[index+13:]
        funcItems = func.split('._')
        if len(funcItems) < 2:
           continue
        className = funcItems[0]
        funcName = funcItems[1]
        varList = funcVarDic.get(className)
        if type(varList) == type(None):
           varList = []
           varList.append(funcName)
           funcVarDic[className] = varList
        else:
           varList.append(funcName)  


    for func in funcStringList:
        if '0000000' not in func:
            continue
        indexFuncL = func.find('-[')
        indexFuncR = func.find('+[')
        indexFunc = -1
        if indexFuncR != -1: 
           indexFunc = indexFuncR
     
        if indexFuncL != -1: 
           indexFunc = indexFuncL

        if indexFunc != -1:
           func = func[indexFunc+2:]
           indexFucEnd = func.find(']')
           func = func[:indexFucEnd]
           # print func
           funcs = func.split(' ')
           className = funcs[0]
           func = funcs[1]

           varList = funcVarDic.get(className)
           if type(varList) == type(None):
              varList = []
           
           if func not in funcUseList and func[:3] != 'set' and func[0] != '.' and func[0] != '_' and 'tableView' not in func and 'collectionView' not in func and 'application' not in func and 'userNotificationCenter' not in func and func not in varList and 'gestureRecognizer' not in func and 'webview' not in func and 'imagePickerController' not in func and 'captureOutput' not in func and 'animate' not in func and 'CollectionView' not in func and 'webView' not in func and 'pickerView' not in func and 'PickerView' not in func and 'messageComposeViewController' not in func and 'searchBar' not in func and 'textField' not in func:
              if 'base' not in className and 'Base' not in className and 'Item' not in className and 'item' not in className and 'model' not in className and 'Model' not in className:
                  if className in fileuseList:
                     endcount = endcount + 1
                     print className + '       ' + func

    time2 = time.time()

    print '\033[1;32m' + ('无用方法数%d' % endcount) + '\033[0m'
    print '\033[1;34m' + ('共耗时%ds' % (time2 - time1)) + '\033[0m'
    print '\033[1;34m' + ('分析文件总数%d' % filecount) + '\033[0m'
    print '\033[1;34m' + ('文件最后修改时间:' + lastTimeString ) + '\033[0m'
    print '\033[1;34m' + ('app版本号:' + appversion ) + '\033[0m'
    print '\033[1;34m' + ('app的build号:' + buildversion ) + '\033[0m'

def showhelpcommand():
   gitHelpString = os.popen('/usr/bin/git --help').read()
   print gitHelpString

   print('\033[1;32m')
   print 'Created by JDJR'
   print '新增命令:'
   print('\033[0m')

   print '\033[1;31m' + 'git pull' + '\033[0m'
   print '\033[1;34m' + '--拉取当前分支' + '\033[0m'

   print '\033[1;31m' + 'git push' + '\033[0m'
   print '\033[1;34m' + '--推送当前分支' + '\033[0m'

   print '\033[1;31m' + 'git pull all' + '\033[0m'
   print '\033[1;34m' + '--拉取所有分支' + '\033[0m'
   print ' '

   print '\033[1;31m' + 'sudo git xcode temp install' + '\033[0m'
   print '\033[1;34m' + '--安装模版' + '\033[0m'

   print '\033[1;31m' + 'sudo git xcode temp uninstall' + '\033[0m'
   print '\033[1;34m' + '--卸载模版' + '\033[0m'
   print ' '

   print '\033[1;31m' + 'git image -unuse' + '\033[0m'
   print '\033[1;34m' + '--检索没有被使用的图片' + '\033[0m'

   print '\033[1;31m' + 'git image -info' + '\033[0m'
   print '\033[1;34m' + '--查看所有图片具体信息' + '\033[0m'

   print '\033[1;31m' + 'git image -classify' + '\033[0m'
   print '\033[1;34m' + '--对重复图片进行分类' + '\033[0m'

   print '\033[1;31m' + 'git image -same imagePath' + '\033[0m'
   print '\033[1;34m' + '--查看有无该图片' + '\033[0m'
   print ' '

   print '\033[1;31m' + 'git class -unuse' + '\033[0m'
   print '\033[1;34m' + '--查看没有被使用的类' + '\033[0m'
   print ' '

   print '\033[1;31m' + 'git class -size' + '\033[0m'
   print '\033[1;34m' + '--查看没有被使用的方法' + '\033[0m'
   print ' ' 

   print '\033[1;31m' + 'git method -unuse' + '\033[0m'
   print '\033[1;34m' + '--查看没有被使用的方法' + '\033[0m'
   print ' '

   
command = ''
if len(sys.argv) < 2:
   showhelpcommand()
   sys.exit(1) # 以非0退出，拦截后边的执行

command = sys.argv[1]

argv1 = ''
argv2 = ''
argv3 = ''
argv4 = ''
if (len(sys.argv) >= 3):
   argv1 = sys.argv[2]

if (len(sys.argv) >= 4):
   argv2 = sys.argv[3]

if (len(sys.argv) >= 5):
   argv2 = sys.argv[4]

if (len(sys.argv) >= 6):
   argv2 = sys.argv[5]

if command == 'xcode':
   if (argv1 == 'temp'):
     if (argv2 == 'install' or argv2 == 'i'):

        if os.path.exists(".config"):
           shutil.rmtree(".config")

        os.mkdir(".config")
        os.chdir(".config")

        os.system('pwd')

        print "start to download ..."
        os.system('git clone https://github.com/xizhengmeng/XcodeTools.git')
        os.chdir("XcodeTools")

        os.system('pwd')

        os.system('git branch')

        # os.system('/usr/bin/git add .')
        # os.system('/usr/bin/git commit -m \'ceshi\'')
        # os.system('/usr/bin/git pull')
        os.system('/usr/bin/git checkout templete')

        filePath = "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates/JDJRCustom"
        if os.path.exists(filePath):
           print 'file exists. start to remove file'
        shutil.rmtree(filePath)
        print 'file remove done'
        shutil.copytree("Custom",filePath)
        os.chdir("../../")
        shutil.rmtree(".config")
        print 'update success'

        os.system('pwd')

     elif (argv2 == 'uninstall' or argv2 == 'u'):
        filePath = "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates/JDJRCustom"
        print 'delete'
        if os.path.exists(filePath):
           print 'file exists. start to remove file'
           shutil.rmtree(filePath)
           print 'file remove done'

     else:
        print '请输入install或者uninstall'

   elif argv1 == 'snip':
     if argv2 == 'list':
        pass
     elif argv2 == 'install':#把某个网络文件安装到xcode
        if os.path.exists(".config"):
           shutil.rmtree(".config")

        os.mkdir(".config")
        os.chdir(".config")

        os.system('pwd')

        print "start to download ..."
        url = 'https://github.com/xizhengmeng/XcodeTools.git'
        os.system('git clone https://github.com/xizhengmeng/XcodeTools.git')
        os.chdir("XcodeTools")

        os.system('pwd')

        os.system('git branch')

        # os.system('/usr/bin/git add .')
        # os.system('/usr/bin/git commit -m \'ceshi\'')
        # os.system('/usr/bin/git pull')
        os.system('/usr/bin/git checkout snippets')

        home = os.environ['HOME']

        filePath = home + "/Library/Developer/Xcode/UserData/CodeSnippets"
        if os.path.exists(filePath):
           print 'file exists. start to remove file'
        shutil.rmtree(filePath)
        print 'file remove done'
        shutil.copytree("Snippets",filePath)
        os.chdir("../../")
        shutil.rmtree(".config")
        print 'update success'

        os.system('pwd')

elif command == 'image':
    if argv1 == '-same':
       if len(argv2) > 0:
          timenew,count = getthesameimage(argv2)
          print ' '
          print '\033[1;34m' + '总耗时:%ds' % timenew + '\033[0m'
          print '\033[1;34m' + '解析图片数量:%d张' % count + '\033[0m'
       else:
          print 'please input imagePath'

    elif argv1 == '-unuse':
       getunuseimage()
    elif argv1 == '-info':
       getimagesUseInfo()
    elif argv1 == '-classify':
       getTheSameImageFolder()   
    else:
       print 'unknown command'

elif command == 'class':
   if argv1 == '-unuse':
      getunuseclass()

   if argv1 == '-size':
      analyse()   

elif command == 'method':
   if argv1 == '-unuse':
      findUnuseMethod()

elif command == '--h' or command == '--help':
     showhelpcommand()
   
else:
 
   if command == 'commit':
      commandString = '/usr/bin/git ' + 'status'
      resultstring = os.popen(commandString).readlines()
      filelist = []
      for item in resultstring:
         if 'modified' in item:
            stringlist = item.split('/')
            lastItem = stringlist[-1]
            if '.m' in lastItem or '.h' in lastItem:
               lastItem = lastItem.replace('\n','')
               filelist.append(lastItem)
      
      if len(filelist) > 0:
        print('\033[1;36m')        
        print '变更文件列表：'
        for item in filelist:
            print '** ' + item
        print('\033[0m') 

      command = ' '.join(sys.argv)
      hasM = False
      if '-m' in command:
         hasM = True
      command = command.replace('git commit -m ','')
      command = command.replace('git commit ','')
      command = command.replace(' ','')

      if hasM:
         commandString = '/usr/bin/git commit -m ' + command
      else:
         commandString = '/usr/bin/git commit ' + command

      os.system(commandString)

   elif (command == 'push' or command == 'pull') and len(argv1) == 0:

      branchs = os.popen('/usr/bin/git branch').readlines()
      currentBranch = ''
      for item in branchs:
          if '*' in item:
             currentBranch = item.replace('*','')
      
      if len(currentBranch) == 0:
         print 'no currentBranch'
         sys.exit(1) # 以非0退出，拦截后边的执行

      print('\033[1;32m' + '*' + currentBranch + '\033[0m')
      
      currentBranch = getCurrentBranch(currentBranch)

      commandString = '/usr/bin/git ' + command + ' ' + 'origin ' + currentBranch
      os.system(commandString)
   
   else:  
      if command == 'pull' and argv1 == 'all':
         os.system('/usr/bin/git fetch')
         os.system('/usr/bin/git merge FETCH_HEAD')
      else:
         commandString = ' '.join(sys.argv)

         if commandString[:3] == 'git':
            commandString = commandString.replace('git ','/usr/bin/git ')
            if './usr/bin/git' in commandString:
              commandString = commandString.replace('./usr/bin/git','.git')
         else:   
            commandString = commandString.replace('/usr/local/bin/git ','/usr/bin/git ')

         os.system(commandString)

